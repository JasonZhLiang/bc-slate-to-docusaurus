### FindUserByExactUniversalId
```r
{
  "searchText": "someUniversalId"
}
```

```objective_c
NSString *searchText = @"someUniversalId";
BCCompletionBlock successBlock;      // define callback
BCErrorCompletionBlock failureBlock; // define callback

[[<%= data.branding.codePrefix %> friendService] findUserByExactUniversalId:searchText
            completionBlock:successBlock
       errorCompletionBlock:failureBlock
                   cbObject:nil];
```

```cpp
const char *searchText = "someUniversalId";
<%= data.branding.codePrefix %>->getFriendService()->findUserByExactUniversalId(searchText, this);
```

```csharp
string searchText = "someUniversalId";
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

<%= data.branding.codePrefix %>.FriendService.FindUserByExactUniversalId(searchText, successCallback, failureCallback);
```

```java
String searchText = "someUniversalId";
this; // implements IServerCallback

<%= data.branding.codePrefix %>.getFriendService().findUserByExactUniversalId(searchText, this);

public void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)
{
    System.out.print(String.format("Success | %s", jsonData.toString()));
}
public void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)
{
    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));
}
```

```javascript
var searchText = "someUniversalId";

<%= data.branding.codePrefix %>.friend.findUserByExactUniversalId(searchText, result =>
{
	var status = result.status;
	console.log(status + " : " + JSON.stringify(result, null, 2));
});
```

```cfscript
var searchText = "someUniversalId";
var friendProxy = bridge.getFriendServiceProxy();

var postResult = friendProxy.findUserByExactUniversalId(searchText);
if (postResult.status == 200) {
    // Success!
}
```

<%= partial(:"partials/versionTag", :locals => {
  :version => "3.11.0",
  :newText => "",
  :comingText => ""
}) %>

<%= partial "partials/jsonBtn" %>

```json-doc
{  
   "status":200,
   "data":{  
      "matchedCount":1,
      "matches":[  
         {  
            "profileId":"111-222-333",
            "profileName":"UserA",
            "summaryFriendData":null,
            "pictureUrl":null
         }
      ]
   }
}
```

Retrieves profile information for the partial Universal ID matches of the specified text.

Does not require the calling user to be a friend of the retrieved users.

<%= partial(:"partials/servop", :locals => { :service_name => "friend", :operation_name => "FIND_PLAYER_BY_EXACT_UNIVERSAL_ID" }) %>
#### Method Parameters
Parameter | Description
--------- | -----------
searchText | The universalId to search for