### StopListening [stoplistening]
```r
{
	"service": "presence",
	"operation": "STOP_LISTENING",
	"data": {}
}
```

```cpp
this; // implements IServerCallback

<%= data.branding.codePrefix %>->getPresenceService()->stopListening(this);
```

```csharp
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};
    
<%= data.branding.codePrefix %>.PresenceService.StopListening(successCallback, failureCallback);
```

```java
this; // implements IServerCallback

<%= data.branding.codePrefix %>.getPresenceService().stopListening(this);

public void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)
{
    System.out.print(String.format("Success | %s", jsonData.toString()));
}
public void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)
{
    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));
}
```

```objective_c
BCCompletionBlock successBlock;      // define callback
BCErrorCompletionBlock failureBlock; // define callback

[[<%= data.branding.codePrefix %> presenceService]  stopListening:successBlock
       errorCompletionBlock:failureBlock
                   cbObject:nil];
```

```javascript
<%= data.branding.codePrefix %>.presence.stopListening(result =>
{
	var status = result.status;
	console.log(status + " : " + JSON.stringify(result, null, 2));
});
```

```cfscript
var presenceProxy = bridge.getPresenceServiceProxy();

var postResult = presenceProxy.stopListening();
if (postResult.status == 200) {
    // Success!
}
```

<%= partial "partials/jsonBtn" %>
```json-doc
{
 "data": null,
 "status": 200
}
```

Stops the caller from receiving RTT presence updates. Does not affect the broadcasting of *their* presence updates to other listeners. Note that *Real-time Tech(RTT) updates* must be enabled in order for this API call to work (see Messaging > Presence in the portal).

<%= partial(:"partials/servop", :locals => { :service_name => "presence", :operation_name => "STOP_LISTENING" }) %>