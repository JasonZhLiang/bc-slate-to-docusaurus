### GetExpiredIdentities
```r
{
	"service": "identity",
	"operation": "GET_EXPIRED_IDENTITIES",
	"data": {}
}
```

```csharp
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

<%= data.branding.codePrefix %>.IdentityService.GetExpiredIdentities(successCallback, failureCallback);
```

```cpp
<%= data.branding.codePrefix %>->getIdentityService()->getExpiredIdentities(this);
```

```objective_c
BCCompletionBlock successBlock;      // define callback
BCErrorCompletionBlock failureBlock; // define callback

[[<%= data.branding.codePrefix %> identityService] getExpiredIdentities:successBlock
       errorCompletionBlock:failureBlock
                   cbObject:nil];
```

```java
this; // implements IServerCallback

<%= data.branding.codePrefix %>.getIdentityService().getExpiredIdentities(this);

public void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)
{
    System.out.print(String.format("Success | %s", jsonData.toString()));
}
public void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)
{
    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));
}
```

```javascript

<%= data.branding.codePrefix %>.identity.getExpiredIdentities(result =>
{
	var status = result.status;
	console.log(status + " : " + JSON.stringify(result, null, 2));
});
```

```cfscript
var identityProxy = bridge.getIdentityServiceProxy();

var postResult = identityProxy.getExpiredIdentities();
if (postResult.status == 200) {
    // Success!
}
```

<%= partial "partials/jsonBtn" %>

```json-doc
{
    "status": 200,
    "data": {
        "identities": {
            "facebook": "10015",
            "twitter": "gertgertgetgte"
        }
    }
}
```

Retrieve a list of all expired identities for the current user. The app may choose to take action and prompt

<%= partial(:"partials/servop", :locals => { :service_name => "identity", :operation_name => "GET_EXPIRED_IDENTITIES" }) %>

