### GetCDNUrl

```r
{
	"service": "file",
	"operation": "GET_CDN_URL",
	"data": {
		"cloudPath": "dir1/dir2",
		"cloudFilename": "filename"
	}
}
```


```objective_c
NSString *fileId = @"hjvfsghguhuhrtghgh";
BCCompletionBlock successBlock;      // define callback
BCErrorCompletionBlock failureBlock; // define callback

[[<%= data.branding.codePrefix %> s3HandlingService] getCDNUrl:fileId
            completionBlock:successBlock
       errorCompletionBlock:failureBlock
                   cbObject:nil];
```

```cpp
const char *fileId = "hjvfsghguhuhrtghgh";
<%= data.branding.codePrefix %>->getS3HandlingService()->getCDNUrl(fileId, this);
```

```csharp
string fileId = "hjvfsghguhuhrtghgh";
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

<%= data.branding.codePrefix %>.S3HandlingService.GetCDNUrl(fileId, successCallback, failureCallback);
```

```java
String fileId = "hjvfsghguhuhrtghgh";
this; // implements IServerCallback

<%= data.branding.codePrefix %>.getS3HandlingService().getCDNUrl(fileId, this);

public void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)
{
    System.out.print(String.format("Success | %s", jsonData.toString()));
}
public void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)
{
    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));
}
```

```javascript
var fileId = "hjvfsghguhuhrtghgh";

<%= data.branding.codePrefix %>.s3Handling.getCDNUrl(fileId, result =>
{
	var status = result.status;
	console.log(status + " : " + JSON.stringify(result, null, 2));
});
```

```cfscript
var fileId = "hjvfsghguhuhrtghgh";
var s3HandlingProxy = bridge.getS3HandlingServiceProxy();

var postResult = s3HandlingProxy.getCDNUrl(fileId);
if (postResult.status == 200) {
    // Success!
}
```

<%= partial "partials/jsonBtn" %>

```json-doc
{
    "status": 200,
    "data": {
        "appServerUrl": "https://api.braincloudservers.com/...f434b1db538b/f/uploadsimplefile.txt",
        "cdnUrl": "https://d2b6zwnvr1nyug.cloudfront.net/bc/g/20001/u/107b3aa9-0d9f-4e90-af..."
    }
}
```

<aside class="notice">
This method was added to support clients (like very old versions of Unity - i.e. circa 2016) that cannot handle HTTP Redirects. This method allows clients to <em>pre-resolve</em> the CDN endpoint for the file to download.<br />
<br />
This call is not required in the great majority of cases. Just use the regular file download URL and the platform will automatically re-direct the client to the appropriate CDN URL.
</aside>

Returns the CDN URL for a file.

<%= partial(:"partials/servop", :locals => { :service_name => "file", :operation_name => "GET_CDN_URL" }) %>
#### Method Parameters
Parameter | Description
--------- | -----------
fileId | File ID

