
<%= data.branding.productName %> **User Entities** (also called **Player Entities**) are full json
objects (similar to Global Entities) except that are private to a <%= data.branding.productName %> user. User entities can be as simple or complex as you would like. All User Entities:

* have a unique `entityId`, generated by <%= data.branding.productName %>
* have a developer-defined `entityType` (string)
* have a `version` to help control updates
* have a json `data` section for developer-defined content
* are by default private to a user, though can be set as shareable via `acl`

User Entities are normally retrieved in bulk after a user logs in, and then
updated in real-time as the user interacts with them.

<aside class="warning">
Prior to release 2.22, all user entities were returned in the Authenticate and GetProfileState
 methods. This is no longer the default behavior, but it can be re-enabled via the Compatibility settings on the [Advanced Settings page](https://portal.braincloudservers.com/admin/dashboard#/development/core-settings-advanced-settings)  the portal.
</aside>

Note that User Entities are by default private (only accessible by the owner), but you *can* make the accessible to other users via the [GetSharedEntityForProfileId](#capi-entity-getsharedentityforprofileid) and [GetSharedEntitiesForProfileId](#capi-entity-getsharedentitiesforprofileid) APIs. To do so, you must make them shareable to others via the <a href="#" onclick='window.navigateToTarget("#appendix-acl");'>ACL</a> settings.

User Entity methods are organized into the following categories:

* Core Access - the basic user entity methods
* Singleton - for accessing entities as a singleton - useful for when there will only ever be a single entity of that type. Note that you don't have to explicitly create singletons, just blindly update them, and the system will create them if they don't exist
* Shared Data - used for accessing the shared user entities of another user

