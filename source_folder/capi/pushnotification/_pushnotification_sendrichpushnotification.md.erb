### SendRichPushNotification

```r
{
	"service": "pushNotification",
	"operation": "SEND_RICH",
	"data": {
		"toProfileId": "profile1",
		"notificationTemplateId": 1,
		"substitutions": {
			"0": "value0",
			"1": "value1"
		}
	}
}
```

```objective_c
NSString *toProfileId = @"profile1";
int notificationTemplateId = 1;
BCCompletionBlock successBlock;      // define callback
BCErrorCompletionBlock failureBlock; // define callback

[[<%= data.branding.codePrefix %> pushNotificationService] sendRichPushNotification:toProfileId
     notificationTemplateId:notificationTemplateId
            completionBlock:successBlock
       errorCompletionBlock:failureBlock
                   cbObject:nil];
```

```cpp
const char *toProfileId = "profile1";
int notificationTemplateId = 1;
<%= data.branding.codePrefix %>->getPushNotificationService()->sendRichPushNotification(toProfileId, notificationTemplateId, this);
```

```csharp
string toProfileId = "profile1";
int notificationTemplateId = 1;
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

<%= data.branding.codePrefix %>.PushNotificationService.SendRichPushNotification(toProfileId, notificationTemplateId, successCallback, failureCallback);
```

```java
String toProfileId = "profile1";
int notificationTemplateId = 1;
this; // implements IServerCallback

<%= data.branding.codePrefix %>.getPushNotificationService().sendRichPushNotification(toProfileId, notificationTemplateId, this);

public void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)
{
    System.out.print(String.format("Success | %s", jsonData.toString()));
}
public void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)
{
    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));
}
```

```javascript
var toProfileId = "profile1";
var notificationTemplateId = 1;

<%= data.branding.codePrefix %>.pushNotification.sendRichPushNotification(toProfileId, notificationTemplateId, result =>
{
	var status = result.status;
	console.log(status + " : " + JSON.stringify(result, null, 2));
});
```

```cfscript
var toProfileId = "profile1";
var notificationTemplateId = 1;
var pushNotificationProxy = bridge.getPushNotificationServiceProxy();

var postResult = pushNotificationProxy.sendRichPushNotification(toProfileId, notificationTemplateId);
if (postResult.status == 200) {
    // Success!
}
```

<%= partial "partials/jsonBtn" %>

```json-doc
{
    "status": 200,
    "data": null
}
```

Sends a notification to a user based on a <%= data.branding.productName %> portal configured notification template.

<%= partial(:"partials/servop", :locals => { :service_name => "pushNotification", :operation_name => "SEND_RICH" }) %>
#### Method Parameters
Parameter | Description
--------- | -----------
toId | The profileId of the user to receive the notification
notificationTemplateId | Id of the notification template

